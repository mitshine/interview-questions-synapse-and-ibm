What is loop unrolling in computer architecture?
Loop unrolling is a compiler optimization applied to certain kinds of loops to reduce the frequency of branches and loop maintenance instructions. It is easily applied to sequential array processing loops where the number of iterations is known prior to execution of the loop.

Register renaming is a form of pipelining that deals with data dependences between instructions by renaming their register operands. An assembly language programmer or a compiler specifies these operands using architectural registers - the registers that are explicit in the instruction set architecture.




Loop Unrolling

Loop unrolling is a loop transformation technique that helps to optimize the execution time of a program. We basically remove or reduce iterations. Loop unrolling increases the programâ€™s speed by eliminating loop control instruction and loop test instructions.

Program 1:

// This program does not uses loop unrolling. 
#include<stdio.h> 
  
int main(void) 
{ 
    for (int i=0; i<5; i++) 
        printf("Hello\n"); //print hello 5 times 
  
    return 0; 
}  

Program 2:

// This program uses loop unrolling. 
#include<stdio.h> 
  
int main(void) 
{ 
    // unrolled the for loop in program 1 
    printf("Hello\n"); 
    printf("Hello\n"); 
    printf("Hello\n"); 
    printf("Hello\n"); 
    printf("Hello\n"); 
  
    return 0; 
}  

Output:

Hello
Hello
Hello
Hello
Hello

Illustration:
Program 2 is more efficient than program 1 because in program 1 there is a need to check the value of i and increment the value of i every time round the loop. So small loops like this or loops where there is fixed number of iterations are involved can be unrolled completely to reduce the loop overhead.

Advantages:

    Increases program efficiency.
    Reduces loop overhead.
    If statements in loop are not dependent on each other, they can be executed in parallel.

Disadvantages:

    Increased program code size, which can be undesirable.
    Possible increased usage of register in a single iteration to store temporary variables which may reduce performance.
    Apart from very small and simple codes, unrolled loops that contain branches are even slower than recursions.
